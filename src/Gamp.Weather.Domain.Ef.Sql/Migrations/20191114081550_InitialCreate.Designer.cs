// <auto-generated />
using System;
using Gamp.Weather.Domain.Ef.Sql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Gamp.Weather.Domain.Ef.Sql.Migrations
{
    [DbContext(typeof(WeatherContext))]
    [Migration("20191114081550_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("gamp-weather")
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Gamp.Weather.Domain.Ef.Sql.DailyForecast", b =>
                {
                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TemperatureC")
                        .HasColumnType("int");

                    b.HasKey("Date");

                    b.ToTable("Forecasts");

                    b.HasData(
                        new
                        {
                            Date = new DateTimeOffset(new DateTime(2019, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -8, 0, 0, 0)),
                            Summary = "Bracing",
                            TemperatureC = -7
                        },
                        new
                        {
                            Date = new DateTimeOffset(new DateTime(2019, 11, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -8, 0, 0, 0)),
                            Summary = "Hot",
                            TemperatureC = 30
                        },
                        new
                        {
                            Date = new DateTimeOffset(new DateTime(2019, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -8, 0, 0, 0)),
                            Summary = "Bracing",
                            TemperatureC = 11
                        },
                        new
                        {
                            Date = new DateTimeOffset(new DateTime(2019, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -8, 0, 0, 0)),
                            Summary = "Chilly",
                            TemperatureC = -16
                        },
                        new
                        {
                            Date = new DateTimeOffset(new DateTime(2019, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -8, 0, 0, 0)),
                            Summary = "Hot",
                            TemperatureC = 53
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
